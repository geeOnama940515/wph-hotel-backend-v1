using System;
using System.Threading.Tasks;
using WPHBookingSystem.Application.Common;
using WPHBookingSystem.Application.Interfaces;
using WPHBookingSystem.Domain.Entities;

namespace WPHBookingSystem.Application.UseCases.Rooms
{
    /// <summary>
    /// Request record for room revenue calculations.
    /// </summary>
    /// <param name="RoomId">The unique identifier of the room to calculate revenue for.</param>
    /// <param name="StartDate">Optional start date for revenue calculation period.</param>
    /// <param name="EndDate">Optional end date for revenue calculation period.</param>
    public record GetRoomRevenueRequest(Guid RoomId, DateTime? StartDate = null, DateTime? EndDate = null);
    
    /// <summary>
    /// Response record for room revenue results.
    /// </summary>
    /// <param name="TotalRevenue">The total revenue generated by the room.</param>
    public record GetRoomRevenueResponse(decimal TotalRevenue);
    
    /// <summary>
    /// Use case responsible for calculating room revenue for financial reporting.
    /// Provides business intelligence for revenue analysis.
    /// </summary>
    public class GetRoomRevenueUseCase
    {
        private readonly IUnitOfWork _unitOfWork;

        public GetRoomRevenueUseCase(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
        }

        /// <summary>
        /// Calculates the total revenue generated by a room during the specified date range.
        /// Delegates to domain logic for revenue calculation.
        /// </summary>
        /// <param name="request">The request containing room ID and optional date range for calculation.</param>
        /// <returns>A result containing the revenue amount or error details.</returns>
        public async Task<Result<GetRoomRevenueResponse>> ExecuteAsync(GetRoomRevenueRequest request)
        {
            try
            {
                var room = await _unitOfWork.Repository<Room>().GetByIdAsync(request.RoomId);
                if (room == null)
                    return Result<GetRoomRevenueResponse>.Failure("Room not found.", 404);

                var total = room.CalculateRevenue(request.StartDate, request.EndDate);
                return Result<GetRoomRevenueResponse>.Success(new GetRoomRevenueResponse(total), "Room revenue retrieved successfully.");
            }
            catch (Exception ex)
            {
                return Result<GetRoomRevenueResponse>.Failure($"Failed to retrieve room revenue: {ex.Message}", 500);
            }
        }
    }
}
